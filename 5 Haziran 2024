#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <SPI.h>
#include <MFRC522.h>
#include <time.h>
#include <Preferences.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>

#define MAX_WIFI_RETRIES 5

#define DEVICE_NAME "Cihaz1"
#define API_KEY "AIzaSyBnEwHEpxCQkJ48H4dUNHimrWkfg_FbEY8"
#define USER_EMAIL "baha.bygld@gmail.com"
#define USER_PASSWORD "224223"
#define DATABASE_URL "https://sam-kart2-default-rtdb.europe-west1.firebasedatabase.app/"
#define RST_PIN     15
#define SS_PIN      5
#define MOSI_PIN    23
#define MISO_PIN    19
#define SCK_PIN     18
#define LED_PIN     13
#define BUZZER_PIN  14

int RXPin = 26;
int TXPin = 27;
int GPSBaud = 9600;

TinyGPSPlus gps;
SoftwareSerial gpsSerial(RXPin, TXPin);
MFRC522 mfrc522(SS_PIN, RST_PIN);

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

String uid;
String databasePath;
String parentPath;

Preferences preferences;

SemaphoreHandle_t semafor;

unsigned long powerOnTime = 0;
bool powerOn = false;

const char *WIFI_SSID[] = {
  "Samsung t50.",
  "trlink_cbce",
  "VodafoneNet-RBE84T",
  "SAM Mekanik Enerji",
  "RUT241_56EC"
};

const char *WIFI_PASSWORD[] = {
  "SAMM2023TR..",
  "12345678",
  "SAMM2023TR.",
  "SAM2024TR.",
  "Si7t1PRs"
};

bool cardRead = false;

void initWiFi(void * parameter) {
  int bestSignal = -9999; // En iyi sinyal
  int bestSignalIndex = -1; // En iyi sinyalin indeksi

  while (true) {
    for (int i = 0; i < sizeof(WIFI_SSID) / sizeof(WIFI_SSID[0]); i++) {
      WiFi.begin(WIFI_SSID[i], WIFI_PASSWORD[i]);
      Serial.printf("WiFi'ye bağlanılıyor... SSID: %s\n", WIFI_SSID[i]);

      unsigned long startTime = millis();
      while (WiFi.status() != WL_CONNECTED && millis() - startTime < 10000) {
        delay(1000);
      }

      if (WiFi.status() == WL_CONNECTED) {
        Serial.printf("\nWiFi'ye başarıyla bağlandı. SSID: %s\n", WiFi.SSID().c_str());
        xSemaphoreGive(semafor);
        vTaskDelete(NULL);
      } else {
        Serial.printf("\nAğa bağlanılamadı. SSID: %s\n", WIFI_SSID[i]);
      }

      // 3 saniye bekle
      delay(3000);

      // GPS sinyalini yeniden aramaya başla
      gpsSerial.begin(GPSBaud);
    }

    delay(5000); // 30 saniye bekle

    // Bağlantı koparsa tekrar denemek için bağlantıyı kes
    WiFi.disconnect();
    delay(1000);

    // En iyi sinyal gücüne sahip ağı bul
    for (int i = 0; i < sizeof(WIFI_SSID) / sizeof(WIFI_SSID[0]); i++) {
      WiFi.begin(WIFI_SSID[i], WIFI_PASSWORD[i]);
      Serial.printf("WiFi'ye bağlanılıyor... SSID: %s\n", WIFI_SSID[i]);

      unsigned long startTime = millis();
      while (WiFi.status() != WL_CONNECTED && millis() - startTime < 10000) {
        delay(1000);
      }

      int signalStrength = WiFi.RSSI();
      Serial.printf("Sinyal Gücü: %d\n", signalStrength);

      if (signalStrength > bestSignal) {
        bestSignal = signalStrength;
        bestSignalIndex = i;
      }

      if (WiFi.status() == WL_CONNECTED) {
        Serial.printf("\nWiFi'ye başarıyla bağlandı. SSID: %s\n", WiFi.SSID().c_str());
        xSemaphoreGive(semafor);
        vTaskDelete(NULL);
      } else {
        Serial.printf("\nAğa bağlanılamadı. SSID: %s\n", WIFI_SSID[i]);
      }
    }

    if (bestSignalIndex != -1) {
      Serial.printf("\nEn iyi sinyal gücüne sahip WiFi ağına bağlanılıyor. SSID: %s\n", WIFI_SSID[bestSignalIndex]);
      WiFi.begin(WIFI_SSID[bestSignalIndex], WIFI_PASSWORD[bestSignalIndex]);

      unsigned long startTime = millis();
      while (WiFi.status() != WL_CONNECTED && millis() - startTime < 10000) {
        delay(1000);
      }

      if (WiFi.status() == WL_CONNECTED) {
        Serial.printf("\nWiFi'ye başarıyla bağlandı. SSID: %s\n", WiFi.SSID().c_str());
        xSemaphoreGive(semafor);
        vTaskDelete(NULL);
      } else {
        Serial.printf("\nEn iyi sinyal gücüne sahip WiFi ağına bağlanılamadı. SSID: %s\n", WIFI_SSID[bestSignalIndex]);
        vTaskDelete(NULL);
      }
    } else {
      Serial.println("\nHerhangi bir WiFi ağına bağlanılamadı.");
      vTaskDelete(NULL);
    }

    delay(5000); // 30 saniye bekle
  }
}



void wifiCheck(void * parameter) {
  vTaskDelay(7000 / portTICK_PERIOD_MS);
  for (;;) {
    if (xSemaphoreTake(semafor, portMAX_DELAY) == pdTRUE) {
      config.api_key = API_KEY;
      auth.user.email = USER_EMAIL;
      auth.user.password = USER_PASSWORD;
      config.database_url = DATABASE_URL;

      Firebase.reconnectWiFi(true);
      fbdo.setResponseSize(4096);
      config.max_token_generation_retry = 5;
      Firebase.begin(&config, &auth);

      Serial.println("Kullanıcı UID alınıyor...");
      while ((auth.token.uid) == "") {
        Serial.print('.');
        delay(1000);
      }
      uid = auth.token.uid.c_str();
      Serial.print("Kullanıcı UID: ");
      Serial.println(uid);

      databasePath = "/UsersData/" + uid + "/readings";

      Serial.println("WiFi bağlantısı sağlandı, flaş bellekten veriler yükleniyor...");

      int count = preferences.getInt("count", 0);
      Serial.print("Flaş bellekteki kart sayısı: ");
      Serial.println(count);

      for (int i = 0; i < count; i++) {
        String keyUid = "uid" + String(i);
        String keyTime = "time" + String(i);
        String keyLat = "lat" + String(i);
        String keyLon = "lon" + String(i);
        String uidString = preferences.getString(keyUid.c_str(), "");
        String timeString = preferences.getString(keyTime.c_str(), "");
        String latString = preferences.getString(keyLat.c_str(), "");
        String lonString = preferences.getString(keyLon.c_str(), "");

        if (uidString != "" && timeString != "") {
          parentPath = databasePath + "/" + String(millis());
          FirebaseJson json;
          json.set("uid", uidString);
          json.set("time", timeString);
          json.set("latitude", latString);
          json.set("longitude", lonString);
          json.set("device_name", DEVICE_NAME);


          if (Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json)) {
            Serial.printf("JSON ayarlandı ve veri başarıyla gönderildi... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());
            preferences.remove(keyUid.c_str());
            preferences.remove(keyTime.c_str());
            preferences.remove(keyLat.c_str());
            preferences.remove(keyLon.c_str());
            Serial.println("Flaş bellekten veri silindi.");
            delay(1000);
          } else {
            Serial.printf("Veri gönderme hatası: %s\n", fbdo.errorReason().c_str());
          }
        }
      }

      preferences.putInt("count", 0);
    }
    vTaskDelay(5000 / portTICK_PERIOD_MS);
  }
}


bool waitForWiFiConnection() {
  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 15000) {
    delay(500);
    Serial.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("WiFi'ye başarıyla bağlandı.");
    return true;
  } else {
    Serial.println("WiFi'ye bağlanılamadı.");
    return false;
  }
}

String lastUID = "";
String uniqueNode = String(millis());

bool saveDataToFlash(const String& uid, const String& elapsedTime, const String& latitude, const String& longitude) {
  int count = preferences.getInt("count", 0);
  String keyUid = "uid" + String(count);
  String keyTime = "time" + String(count);
  String keyLat = "lat" + String(count);
  String keyLon = "lon" + String(count);

  preferences.putString(keyUid.c_str(), uid);
  preferences.putString(keyTime.c_str(), elapsedTime);
  preferences.putString(keyLat.c_str(), latitude);
  preferences.putString(keyLon.c_str(), longitude);

  count++;
  preferences.putInt("count", count);

  FirebaseJson json;
  json.set("uid", uid);
  json.set("time", elapsedTime);
  json.set("latitude", latitude);
  json.set("longitude", longitude);

  // WiFi bağlantısı varsa cihaz ismini ekle
  if (WiFi.status() == WL_CONNECTED) {
    json.set("device_name", DEVICE_NAME);
  }

  parentPath = databasePath + "/" + String(millis());
  if (Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json)) {
    Serial.println("Veriler başarıyla gönderildi.");
  } else {
    Serial.printf("Veri gönderme hatası: %s\n", fbdo.errorReason().c_str());
  }

  return true;
}



unsigned long lastGpsFixTime = 0; // GPS sinyalinin en son ne zaman alındığını takip etmek için

void readRFIDCard(void * param) {
  for (;;) {
    if (!mfrc522.PICC_IsNewCardPresent()) {
      delay(50);
      continue;
    }
    if (!mfrc522.PICC_ReadCardSerial()) {
      delay(50);
      continue;
    }

    String content = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : ""));
      content.concat(String(mfrc522.uid.uidByte[i], HEX));
    }
    content.toUpperCase();

    if (content == lastUID) {
      Serial.println("Aynı kart art arda okutulamaz.");
      delay(1000);
      continue;
    }

    lastUID = content;

    digitalWrite(LED_PIN, HIGH);
    delay(1000);
    digitalWrite(LED_PIN, LOW);

    char latBuffer[10] = "00000";
    char lonBuffer[10] = "00000";

    if (gps.location.isValid()) {
      dtostrf(gps.location.lat(), 6, 6, latBuffer);
      dtostrf(gps.location.lng(), 6, 6, lonBuffer);
      lastGpsFixTime = millis();
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("WiFi bağlantısı var, veriler Firebase'e gönderiliyor...");

      parentPath = databasePath + "/" + String(millis());
      FirebaseJson json;
      json.set("uid", content);
      json.set("time", String((millis() - powerOnTime) / 1000));
      json.set("latitude", String(latBuffer));
      json.set("longitude", String(lonBuffer));

      // NTP ile tarih ve saat bilgisi al
      configTime(3 * 3600, 0, "pool.ntp.org");
      while (!time(nullptr)) {
        Serial.print(".");
        delay(1000);
      }
      
      struct tm timeinfo;
      if (!getLocalTime(&timeinfo)) {
        Serial.println("Zaman bilgisi alınamadı!");
      } else {
        char timeStringBuff[50];  // Saat ve tarih bilgisini saklamak için bir tampon
        strftime(timeStringBuff, sizeof(timeStringBuff), "%Y-%m-%d %H:%M:%S", &timeinfo);
        Serial.println(timeStringBuff);
        json.set("date_time", timeStringBuff);
      }

      json.set("device_name", DEVICE_NAME); // Cihaz ismini ekle

      if (Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json)) {
        Serial.println("Veriler başarıyla gönderildi.");
      } else {
        Serial.printf("Veri gönderme hatası: %s\n", fbdo.errorReason().c_str());
      }
    } else {
      Serial.println("WiFi bağlantısı yok, veriler flaş belleğe kaydediliyor...");
      saveDataToFlash(content, String((millis() - powerOnTime) / 1000), String(latBuffer), String(lonBuffer));
    }

    // Kart okunduğunda buzzer'ı kapat
    digitalWrite(BUZZER_PIN, LOW);

    cardRead = true;
    delay(1000);
  }
}




void displayInfo() {
  if (gps.location.isValid()) {
    Serial.print("Latitude: ");
    Serial.println(gps.location.lat(), 6);
    Serial.print("Longitude: ");
    Serial.println(gps.location.lng(), 6);
    Serial.print("Altitude: ");
    Serial.println(gps.altitude.meters());
    if (!cardRead) {  // Only turn on the buzzer if a card hasn't been read yet
      digitalWrite(BUZZER_PIN, HIGH);  // Turn on the buzzer when GPS is connected
    }
  } else {
    Serial.println("Location: Not Available");
  }

  Serial.print("Date: ");
  if (gps.date.isValid()) {
    Serial.print(gps.date.month());
    Serial.print("/");
    Serial.print(gps.date.day());
    Serial.print("/");
    Serial.println(gps.date.year());
  } else {
    Serial.println("Not Available");
  }

  Serial.print("Time: ");
  if (gps.time.isValid()) {
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour());
    Serial.print(":");
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(":");
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.println(gps.time.second());
  } else {
    Serial.println("Not Available");
  }
  Serial.println();
}

void setup() {
  Serial.begin(9600);
  semafor = xSemaphoreCreateBinary();

  pinMode(LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);  // Initialize the buzzer pin
  digitalWrite(BUZZER_PIN, LOW);  // Ensure the buzzer is off initially

  preferences.begin("my-app", false);

  gpsSerial.begin(GPSBaud);

  xTaskCreatePinnedToCore(
    initWiFi,
    "InitWiFi",
    10000,
    NULL,
    1,
    NULL,
    0
  );

  xTaskCreatePinnedToCore(
    wifiCheck,
    "WiFiCheck",
    10000,
    NULL,
    1,
    NULL,
    0
  );

  xTaskCreatePinnedToCore(
    readRFIDCard,
    "RFIDCard",
    10000,
    NULL,
    1,
    NULL,
    0
  );

  xTaskCreatePinnedToCore(
  checkBuzzer,
  "CheckBuzzer",
  10000,
  NULL,
  1,
  NULL,
  0
);

  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
  mfrc522.PCD_Init();

  configTime(3 * 3600, 0, "pool.ntp.org");

  powerOnTime = millis();
  powerOn = true;
}

bool gpsDataAvailable = false;

void checkBuzzer(void * parameter) {
  for (;;) {
    if (!gpsDataAvailable && (millis() - lastGpsFixTime > 30000) && !cardRead && powerOn) {
      digitalWrite(BUZZER_PIN, HIGH);
      delay(500);  // Buzzer'ın 0.5 saniye çalmasını sağlamak için
      digitalWrite(BUZZER_PIN, LOW);
    }
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

unsigned long lastPrintTime = 0;
unsigned long lastDisplayTime = 0;

void loop() {
  if (millis() - lastPrintTime >= 5000) {
    unsigned long elapsedTime = millis() - powerOnTime;
    Serial.print("Elapsed Time (s): ");
    Serial.println(elapsedTime / 1000);
    lastPrintTime = millis();
  }

  if (millis() - lastDisplayTime >= 5000) {
    if (gps.location.isValid()) {
      Serial.print("Latitude: ");
      Serial.println(gps.location.lat(), 6);
      Serial.print("Longitude: ");
      Serial.println(gps.location.lng(), 6);
      Serial.print("Altitude: ");
      Serial.println(gps.altitude.meters());
      if (!cardRead) {  // Only turn on the buzzer if a card hasn't been read yet
        digitalWrite(BUZZER_PIN, HIGH);  // Turn on the buzzer when GPS is connected
      }
    } else {
      Serial.println("Location: Not Available");
    }

    lastDisplayTime = millis();
  }

  while (gpsSerial.available() > 0)
    if (gps.encode(gpsSerial.read()))
      displayInfo();

  vTaskDelay(100 / portTICK_PERIOD_MS);
}
