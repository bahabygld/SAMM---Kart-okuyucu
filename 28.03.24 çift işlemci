#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <SPI.h>
#include <MFRC522.h> 
#include "time.h"
#include "EEPROM.h"

#define WIFI_SSID "RUT241_56EC"
#define WIFI_PASSWORD "Si7t1PRs"
#define API_KEY "AIzaSyDF6LtJOLJnzhYwdN6nq_Fd5fpW8Ezj07o"
#define USER_EMAIL "baha_bygld@gmail.com"
#define USER_PASSWORD "224223"
#define DATABASE_URL "https://data-yollama-default-rtdb.europe-west1.firebasedatabase.app/"

#define RST_PIN     15
#define SS_PIN      5
#define MOSI_PIN    23
#define MISO_PIN    19
#define SCK_PIN     18

MFRC522 mfrc522(SS_PIN, RST_PIN);

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

String uid;
String databasePath;
String parentPath;

const char* ntpServer = "pool.ntp.org";

bool cardRead = false;

TaskHandle_t Task1;
TaskHandle_t Task2;

void initWiFi(void * parameter) {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("WiFi'ye bağlanılıyor...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
  vTaskDelete(NULL);
}

unsigned long lastWifiReset = 0;
const unsigned long wifiResetInterval = 60000; // 1 dakika

void wifiCheck(void * parameter) {
  bool prevWiFiConnected = false;
  for (;;) {
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi bağlantısı kesildi, yeniden bağlanılıyor...");
      xTaskCreatePinnedToCore(
        initWiFi,     // Görev fonksiyonu
        "WiFiInit",   // Görev adı
        10000,        // Yığın boyutu
        NULL,         // Parametre
        1,            // Öncelik
        &Task1,       // Görev tanımlayıcısı
        0             // Çekirdek numarası (0 veya 1)
      );
      prevWiFiConnected = false;
    } else {
      if (!prevWiFiConnected) {
        // WiFi bağlantısı sağlandığında EEPROM'dan verileri okuyup veritabanına yükle
        Serial.println("WiFi bağlantısı sağlandı, EEPROM'dan veriler yükleniyor...");
        int dataCount = 0;
        for (int i = 0; i < EEPROM.length(); i += 17) {
          String uid = "";
          String time = "";
          bool validData = true;
          for (int j = 0; j < 16; j++) {
            char c = EEPROM.read(i + j);
            if (c == '\0') {
              validData = false;
              break;
            }
            if (j < 8) uid += c;
            else time += c;
          }
          if (validData && uid != "" && time != "") {
            parentPath = databasePath + "/" + String(millis() + dataCount); // Her veriyi farklı bir zamanla yükle
            FirebaseJson json;
            json.set("uid", uid);
            json.set("time", time);
            Serial.printf("JSON ayarlandı... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());
            dataCount++;
          }
        }
        Serial.printf("%d adet veri yüklendi.\n", dataCount);
        prevWiFiConnected = true;
      }
    }

    // Her 1 dakikada bir WiFi bağlantısını sıfırla
    if (millis() - lastWifiReset >= wifiResetInterval) {
      Serial.println("WiFi bağlantısı sıfırlanıyor...");
      WiFi.disconnect(true);
      delay(1000);
      lastWifiReset = millis();
    }

    delay(5000); // Her 5 saniyede bir kontrol et
  }
}


void setup() {
  Serial.begin(115200);

  xTaskCreatePinnedToCore(
    wifiCheck,    // Görev fonksiyonu
    "WiFiCheck",  // Görev adı
    10000,        // Yığın boyutu
    NULL,         // Parametre
    1,            // Öncelik
    &Task2,       // Görev tanımlayıcısı
    0             // Çekirdek numarası (0 veya 1)
  );

  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
  mfrc522.PCD_Init();

  configTime(3 * 3600, 0, ntpServer);

  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);
  config.max_token_generation_retry = 5;
  Firebase.begin(&config, &auth);

  Serial.println("Kullanıcı UID alınıyor...");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  uid = auth.token.uid.c_str();
  Serial.print("Kullanıcı UID: ");
  Serial.println(uid);

  databasePath = "/UsersData/" + uid + "/readings";
}

void readRFIDCard() {
  if (WiFi.status() == WL_CONNECTED) {
    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
      String uidString = "";
      for (byte i = 0; i < mfrc522.uid.size; i++) {
        uidString += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
        uidString += String(mfrc522.uid.uidByte[i], HEX);
      }

      time_t now = time(nullptr);
      struct tm *timeinfo;
      timeinfo = localtime(&now);
      String currentTime = String(timeinfo->tm_hour) + ":" + String(timeinfo->tm_min) + ":" + String(timeinfo->tm_sec);

      int address = 0;
      while (EEPROM.read(address) != 0 && address < EEPROM.length()) {
        address += 17; // Her bir veri bloğu 17 byte (8 byte UID + 8 byte zaman + 1 byte null karakter)
      }
      if (address < EEPROM.length()) {
        for (int i = 0; i < uidString.length(); i++) {
          EEPROM.write(address + i, uidString[i]);
        }
        for (int i = 0; i < currentTime.length(); i++) {
          EEPROM.write(address + uidString.length() + i, currentTime[i]);
        }
        EEPROM.write(address + uidString.length() + currentTime.length(), '\0'); // Null karakter ekle
        EEPROM.commit();

        // EEPROM'a yazılan verileri seri monitörde göster
        Serial.println("EEPROM'a yazılan veriler:");
        for (int i = 0; i < uidString.length() + currentTime.length() + 1; i++) {
          Serial.print((char)EEPROM.read(address + i));
        }
        Serial.println();
      } else {
        Serial.println("EEPROM dolu, yeni veri yazılamıyor!");
      }

      parentPath = databasePath + "/" + String(millis());
      FirebaseJson json;
      json.set("uid", uidString);
      json.set("time", currentTime);
      Serial.printf("JSON ayarlandı... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());

      cardRead = true;
      delay(2000); // Ardışık okumalar arasında 2 saniye bekleme
    }
  }
}


void loop() {
  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);

  readRFIDCard(); // Kart okuma işlemi her zaman yapılır

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();

  // Diğer işlemler...
}
