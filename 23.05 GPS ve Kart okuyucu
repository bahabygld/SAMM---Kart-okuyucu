#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <SPI.h>
#include <MFRC522.h>
#include <time.h>
#include <Preferences.h> // Flash belleği için kütüphane
#include <TinyGPS++.h>
#include <SoftwareSerial.h>

#define WIFI_SSID_1 "Samsung t50"
#define WIFI_PASSWORD_1 "SAMM2023TR.."
#define WIFI_SSID_2 "VodafoneNet-RBE84T"
#define WIFI_PASSWORD_2 "SAMM2023TR."
#define WIFI_SSID_3 "SAM Mekanik Enerji"
#define WIFI_PASSWORD_3 "SAM2024TR."
#define MAX_WIFI_RETRIES 5
#define API_KEY "AIzaSyBO2pqOriBz4q_ZJ49AM3KKT1TzlQ_ctbc"
#define USER_EMAIL "baha.bygld@gmail.com"
#define USER_PASSWORD "224223"
#define DATABASE_URL "https://kart-okutma-sam-default-rtdb.europe-west1.firebasedatabase.app/"

#define RST_PIN     15
#define SS_PIN      5
#define MOSI_PIN    23
#define MISO_PIN    19
#define SCK_PIN     18

#define LED_PIN     13 // LED pin

int RXPin = 26;
int TXPin = 27;
int GPSBaud = 9600;

TinyGPSPlus gps;
SoftwareSerial gpsSerial(RXPin, TXPin);
MFRC522 mfrc522(SS_PIN, RST_PIN);

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

String uid;
String databasePath;
String parentPath;

Preferences preferences; // Flash belleği için nesne oluştur

SemaphoreHandle_t semafor;

unsigned long powerOnTime = 0; // Zamanı sıfırlamak için güç verildiği zamanı saklar
bool powerOn = false; // Güç verildiğinde true olur

void initWiFi(void * parameter) {
  int attempt = 1;
  do {
    WiFi.begin(attempt == 1 ? WIFI_SSID_1 : (attempt == 2 ? WIFI_SSID_2 : WIFI_SSID_3),attempt == 1 ? WIFI_PASSWORD_1 : (attempt == 2 ? WIFI_PASSWORD_2 : WIFI_PASSWORD_3));

    Serial.printf("WiFi'ye bağlanılıyor... Attempt %d\n", attempt);
    unsigned long startTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startTime < 15000) {
      Serial.print('.');
      delay(1000);
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.printf("\nWiFi'ye başarıyla bağlandı. SSID: %s\n", WiFi.SSID().c_str());
      xSemaphoreGive(semafor); // WiFi bağlantısı kurulduğunda semaforu serbest bırak
      vTaskDelete(NULL);
    }
    attempt++;
  } while (attempt <= 2 && WiFi.status() != WL_CONNECTED);

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nHerhangi bir WiFi ağına bağlanılamadı.");
    vTaskDelete(NULL);
  }
}



bool waitForWiFiConnection() {
  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 15000) {
    delay(500);
    Serial.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("WiFi'ye başarıyla bağlandı.");
    return true;
  } else {
    Serial.println("WiFi'ye bağlanılamadı.");
    return false;
  }
}

void wifiCheck(void * parameter) {
  vTaskDelay(7000 / portTICK_PERIOD_MS); // WiFi bağlantısından sonra 7 saniye bekleyin
  for (;;) {
    if (xSemaphoreTake(semafor, portMAX_DELAY) == pdTRUE) {
      // WiFi bağlantısı sağlandı, flaş belleğinden verileri yükle ve veritabanına yükle
      Serial.println("WiFi bağlantısı sağlandı, kullanıcı UID alınıyor...");
      
      while ((auth.token.uid) == "") {
        Serial.print('.');
        delay(1000);
      }
      
      uid = auth.token.uid.c_str();
      Serial.print("Kullanıcı UID: ");
      Serial.println(uid);
      
      int count = preferences.getInt("count", 0);
      Serial.print("Flaş bellekteki kart sayısı: ");
      Serial.println(count);

      for (int i = 0; i < count; i++) {
        String keyUid = "uid" + String(i);
        String keyTime = "time" + String(i);
        String uidString = preferences.getString(keyUid.c_str(), "");
        String timeString = preferences.getString(keyTime.c_str(), "");
        if (uidString != "" && timeString != "") {
          parentPath = databasePath + "/" + String(millis());
          FirebaseJson json;
          json.set("uid", uidString);
          json.set("time", timeString);
          if (Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json)) {
            Serial.printf("JSON ayarlandı ve veri başarıyla gönderildi... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());
            preferences.remove(keyUid.c_str()); // UID'yi flaş bellekten sil
            preferences.remove(keyTime.c_str()); // Zamanı flaş bellekten sil
            Serial.println("Flaş bellekten veri silindi.");
            delay(1000); // 1 saniye bekleme
          } else {
            Serial.printf("Veri gönderme hatası: %s\n", fbdo.errorReason().c_str());
          }
        }
      }

      // Tüm veriler aktarıldıktan sonra count değerini sıfırla
      preferences.putInt("count", 0);
    }
    vTaskDelay(5000 / portTICK_PERIOD_MS); // Her 5 saniyede bir kontrol et
  }
}

String lastUID = ""; // En son okutulan kartın UID'sini saklamak için değişken

void readRFIDCard(void * param) {
  for (;;) {
    if ( !mfrc522.PICC_IsNewCardPresent()) {
      delay(50);
      continue;
    }
    if ( !mfrc522.PICC_ReadCardSerial()) {
      delay(50);
      continue;
    }

    String content = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : ""));
      content.concat(String(mfrc522.uid.uidByte[i], HEX));
    }
    content.toUpperCase();

    if (content == lastUID) {
      Serial.println("Aynı kart art arda okutulamaz.");
      delay(1000);
      continue; // Aynı kart okutulduysa işlemi atla
    }

    lastUID = content; // En son okutulan kartın UID'sini güncelle

    // Gerekli JSON nesnesi oluşturuluyor
    FirebaseJson json;

    // Latitude ve longitude değerlerini string'e dönüştürüyoruz
    char latBuffer[10];
    char lonBuffer[10];
    dtostrf(gps.location.lat(), 6, 6, latBuffer);
    dtostrf(gps.location.lng(), 6, 6, lonBuffer);

    // JSON nesnesine ekleme yapıyoruz
    json.set("latitude", latBuffer);
    json.set("longitude", lonBuffer);
    json.set("UID", content);
    json.set("elapsed_time", (millis() - powerOnTime) / 1000); // Elapsed time'ı ekliyoruz

    // Benzersiz düğüm adı oluşturmak için UID ve zaman damgasını kullanıyoruz
    String uniqueNode = String(millis()); // Benzersiz düğüm adı için zaman damgası kullan

    // RFID kartının UID'sini ve benzersiz düğüm adını kullanarak yeni bir düğüm oluşturuyoruz
    String userPath = "/UsersData/" + uid + "/readings/" + content + "_" + uniqueNode; // Kullanıcı verilerinin bulunduğu düğüm yolu
    if (Firebase.RTDB.setJSON(&fbdo, userPath.c_str(), &json)) {
      Serial.println("Data sent to Firebase successfully!");
    } else {
      Serial.println("Failed to send data to Firebase.");
      Serial.println(fbdo.errorReason());
    }

    delay(1000); // RFID kartının tekrar okunması için bekliyoruz
  }
}


void displayInfo()
{
  if (gps.location.isValid())
  {
    Serial.print("Latitude: ");
    Serial.println(gps.location.lat(), 6);
    Serial.print("Longitude: ");
    Serial.println(gps.location.lng(), 6);
    Serial.print("Altitude: ");
    Serial.println(gps.altitude.meters());
  }
  else
  {
    Serial.println("Location: Not Available");
  }
  
  Serial.print("Date: ");
  if (gps.date.isValid())
  {
    Serial.print(gps.date.month());
    Serial.print("/");
    Serial.print(gps.date.day());
    Serial.print("/");
    Serial.println(gps.date.year());
  }
  else
  {
    Serial.println("Not Available");
  }
  
  Serial.print("Time: ");
  if (gps.time.isValid())
  {
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour());
    Serial.print(":");
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(":");
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.println(gps.time.second());
  }
  else
  {
    Serial.println("Not Available");
  }
  Serial.println();
}

void setup() {
  Serial.begin(9600);
  semafor = xSemaphoreCreateBinary(); // Semaforu oluştur

  pinMode(LED_PIN, OUTPUT); // LED pinini çıkış olarak ayarla

  preferences.begin("my-app", false); // Başlatma işlemi

  // GPS'i başlat
  gpsSerial.begin(GPSBaud);

  xTaskCreatePinnedToCore(
    initWiFi,     // WiFi başlatma fonksiyonu
    "InitWiFi",   // Görev adı
    10000,        // Yığın boyutu
    NULL,         // Parametre
    1,            // Öncelik
    NULL,         // Görev tanımlayıcısı
    0             // Çekirdek numarası (0 veya 1)
  );

  xTaskCreatePinnedToCore(
    wifiCheck,    // WiFi kontrol fonksiyonu
    "WiFiCheck",  // Görev adı
    10000,        // Yığın boyutu
    NULL,         // Parametre
    1,            // Öncelik
    NULL,         // Görev tanımlayıcısı
    0             // Çekirdek numarası (0 veya 1)
  );

  xTaskCreatePinnedToCore(
    readRFIDCard, // RFID kart okuma fonksiyonu
    "RFIDCard",   // Görev adı
    10000,        // Yığın boyutu
    NULL,         // Parametre
    1,            // Öncelik
    NULL,         // Görev tanımlayıcısı
    0             // Çekirdek numarası (0 veya 1)
  );

  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
  mfrc522.PCD_Init();

  configTime(3 * 3600, 0, "pool.ntp.org");

  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);
  config.max_token_generation_retry = 5;
  Firebase.begin(&config, &auth);

  Serial.println("Kullanıcı UID alınıyor...");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  uid = auth.token.uid.c_str();
  Serial.print("Kullanıcı UID: ");
  Serial.println(uid);

  databasePath = "/UsersData/" + uid + "/readings";

  powerOnTime = millis(); // Güç verildiği zamanı kaydet
  powerOn = true; // Güç verildi
}


void loop() {
  unsigned long currentMillis = millis();
  unsigned long elapsedTime = currentMillis - powerOnTime;
  Serial.print("Elapsed Time (s): ");
  Serial.println(elapsedTime / 1000); // Geçen süreyi saniyeye çevirerek yazdır

  // GPS verilerini işle
  while (gpsSerial.available() > 0)
    if (gps.encode(gpsSerial.read()))
      displayInfo();

  vTaskDelay(100 / portTICK_PERIOD_MS); // 100 ms bekle
}
