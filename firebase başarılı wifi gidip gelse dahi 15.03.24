#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <SPI.h>
#include <MFRC522.h>
#include "time.h"
#include "EEPROM.h"

#define WIFI_SSID "VodafoneNet-RBE84T"
#define WIFI_PASSWORD "SAMM2023TR."
#define API_KEY "AIzaSyDF6LtJOLJnzhYwdN6nq_Fd5fpW8Ezj07o"
#define USER_EMAIL "baha_bygld@gmail.com"
#define USER_PASSWORD "224223"
#define DATABASE_URL "https://data-yollama-default-rtdb.europe-west1.firebasedatabase.app/"

#define RST_PIN     15
#define SS_PIN      5
#define MOSI_PIN    23
#define MISO_PIN    19
#define SCK_PIN     18

MFRC522 mfrc522(SS_PIN, RST_PIN);

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

String uid;
String databasePath;
String parentPath;

const char* ntpServer = "pool.ntp.org";

bool wifiConnected = false;
bool cardRead = false;
bool wifiWasDisconnected = false;

void initWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("WiFi'ye bağlanılıyor...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}

void readRFIDCard() {
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String uidString = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      uidString += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
      uidString += String(mfrc522.uid.uidByte[i], HEX);
    }

    time_t now = time(nullptr);
    struct tm *timeinfo;
    timeinfo = localtime(&now);
    String currentTime = String(timeinfo->tm_hour) + ":" + String(timeinfo->tm_min) + ":" + String(timeinfo->tm_sec);

    parentPath = databasePath + "/" + String(millis());
    FirebaseJson json;
    json.set("uid", uidString);
    json.set("time", currentTime);
    Serial.printf("JSON ayarlandı... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());

    cardRead = true;
    delay(2000); // Ardışık okumalar arasında 2 saniye bekleme
  }
}

void uploadDataFromEEPROM() {
  for (int i = 0; i < EEPROM.length(); i++) {
    if (EEPROM.read(i) != 0xFF) {
      // EEPROM hücresinde veri varsa yükleme işlemi yap
      String uidString = "";
      for (int j = 0; j < mfrc522.uid.size; j++) {
        uidString += String(EEPROM.read(i) < 0x10 ? "0" : "");
        uidString += String(EEPROM.read(i), DEC);
      }

      time_t now = time(nullptr);
      struct tm *timeinfo;
      timeinfo = localtime(&now);
      String currentTime = String(timeinfo->tm_hour) + ":" + String(timeinfo->tm_min) + ":" + String(timeinfo->tm_sec);

      parentPath = databasePath + "/" + String(millis());
      FirebaseJson json;
      json.set("uid", uidString);
      json.set("time", currentTime);
      Serial.printf("JSON ayarlandı... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());

      // Veri yüklendiğinde EEPROM hücresini temizle
      EEPROM.write(i, 0xFF);
    }
  }
  EEPROM.commit(); // EEPROM değişikliklerini kaydet
}

void setup() {
  Serial.begin(115200);

  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
  mfrc522.PCD_Init();
  initWiFi();

  configTime(3 * 3600, 0, ntpServer);

  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);
  config.max_token_generation_retry = 5;
  Firebase.begin(&config, &auth);

  Serial.println("Kullanıcı UID alınıyor...");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  uid = auth.token.uid.c_str();
  Serial.print("Kullanıcı UID: ");
  Serial.println(uid);

  databasePath = "/UsersData/" + uid + "/readings";
}

void loop() {
  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
  
  if (WiFi.status() != WL_CONNECTED) {
    wifiConnected = false;
    if (!wifiWasDisconnected) {
      wifiWasDisconnected = true;
      Serial.println("WiFi bağlantısı kesildi.");
    }
    initWiFi();
  } else {
    if (wifiWasDisconnected) {
      wifiWasDisconnected = false;
      Serial.println("WiFi bağlantısı yeniden sağlandı.");
      uploadDataFromEEPROM(); // WiFi bağlandığında EEPROM'dan veri yükle
    }
    wifiConnected = true;
  }

  if (wifiConnected) {
    readRFIDCard();
  }

  if (!wifiConnected && cardRead) {
    cardRead = false;

    for (int i = 0; i < EEPROM.length(); i++) {
      if (EEPROM.read(i) == 0xFF) {
        // Boş EEPROM hücresine veriyi yaz
        for (int j = 0; j < mfrc522.uid.size; j++) {
          EEPROM.write(i, mfrc522.uid.uidByte[j]);
        }
        EEPROM.commit(); // EEPROM değişikliklerini kaydet
        break;
      }
    }
  }

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}
