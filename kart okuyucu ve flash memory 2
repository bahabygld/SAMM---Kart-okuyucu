#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <LittleFS.h>
#include <HTTPClient.h>

#define RST_PIN     15 // MFRC522 RST pinini GPIO 14 (D14) pinine bağla
#define SS_PIN      5   // MFRC522 SDA (SPI için) pinini GPIO 13 (D13) pinine bağla

MFRC522 mfrc522(SS_PIN, RST_PIN);  // MFRC522 nesnesini oluştur

const char* ssid = "VodafoneNet-RBE84T";
const char* password = "SAMM2023TR.";

WiFiServer server(80);
WiFiClient client;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 10800, 60000); // NTP sunucusu ve zaman dilimi (GMT+3 için 10800 saniye) ayarları

bool kartOkundu = false;

const char* host = "https://docs.google.com/spreadsheets/d/1lSKdRHeNWgkQJHwG6SQ8i9sNdXO6ydDU4kFMLgMdxQE/edit#gid=0";
const int httpsPort = 443;
const char* scriptId = "1lSKdRHeNWgkQJHwG6SQ8i9sNdXO6ydDU4kFMLgMdxQE";
const char* sheetName = "Kart Okuma";

void setup() {
    Serial.begin(115200);
    SPI.begin();           // SPI haberleşmesi başlatıldı
    mfrc522.PCD_Init();    // MFRC522 tanımlandı
    delay(2000);
    WiFi.begin(ssid, password);
    
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Bağlanılamadı...");
        Serial.println("Kartinizin okunmasi için yaklastiriniz...");
        Serial.println();
    }
    
    Serial.println("Bağlandı!");
    pinMode(2, OUTPUT); // Dahili LED pinini çıkış olarak ayarla

    if (!LittleFS.begin(true)) {
        Serial.println("LittleFS dosya sistemi başlatılamadı!");
        return;
    }
    Serial.println("LittleFS dosya sistemi başarıyla başlatıldı.");

    // LittleFS'te varsa uidler.txt dosyasını sil
    if (LittleFS.exists("/uidler.txt")) {
        LittleFS.remove("/uidler.txt");
    }
}

void loop() {
    if (WiFi.status() == WL_CONNECTED) {
        digitalWrite(2, HIGH); // Bağlıysa dahili LED'i yak
    } else {
        digitalWrite(2, LOW); // Bağlantı kesildiyse LED'i söndür
    }
    if (!kartOkundu) {
        // Yeni kartlar aranıyor
        if (!mfrc522.PICC_IsNewCardPresent()) {
            return;
        }
        if (!mfrc522.PICC_ReadCardSerial()) {
            return;
        }
        // UID numarası yazdırılıyor
        Serial.print("UID tag :");
        String uidStr = "";
        for (byte i = 0; i < mfrc522.uid.size; i++) {
           Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
           Serial.print(mfrc522.uid.uidByte[i], HEX);
           uidStr += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
           uidStr += String(mfrc522.uid.uidByte[i], HEX);
        }
        Serial.println();

        kaydet(uidStr); // UID'yi LittleFS'e kaydet

        postToGoogleSheets(uidStr); // UID'yi Google Sheets API'ına gönder

        kartOkundu = true; // Kart okunduğunu işaretle
        delay(2500);       // 2.5 saniye bekle
      
    } 
    
    else {
        // WiFi bağlantısını kontrol et
        if (WiFi.status() != WL_CONNECTED) {
            Serial.println("WiFi bağlantısı yok. Yeniden bağlanmaya çalışılıyor...");
            WiFi.begin(ssid, password);
            while (WiFi.status() != WL_CONNECTED) {
                delay(1000);
                Serial.println("WiFi'ye yeniden bağlanılıyor...");
            }
            Serial.println("WiFi'ye yeniden bağlandı");
        }

        timeClient.update();
        time_t epochTime = (time_t)(timeClient.getEpochTime()); // Zamanı al ve Türkiye saatine çevir

        struct tm *timeinfo;
        timeinfo = localtime(&epochTime);

        char timeString[30];
        strftime(timeString, sizeof(timeString), "%Y-%m-%d %H:%M:%S", timeinfo);

        Serial.print("Gerçek zamanlı saat: ");
        Serial.println(timeString);
        Serial.println("Kartınızı tekrar okutabilirsiniz...");
        kartOkundu = false; // Kart okunmadı olarak işaretle
    }
}

void kaydet(String uid) {
    File file = LittleFS.open("/uidler.txt", "a+");
    if (!file) {
        Serial.println("Dosya açılamadı!");
        return;
    }
    
    file.println(uid);
    file.close();
    Serial.println("UID kaydedildi: " + uid);
}

void postToGoogleSheets(String uid) {
    WiFiClientSecure client;
    if (!client.connect(host, httpsPort)) {
        Serial.println("Bağlantı hatası");
        return;
    }

    // UID'yi Google Sheets API'ına gönderme
    String url = "/macros/s/" + String(scriptId) + "/exec?uid=" + uid;
    client.print(String("POST ") + url + " HTTP/1.1\r\n" +
                 "Host: " + host + "\r\n" +
                 "User-Agent: ESP32\r\n" +
                 "Connection: close\r\n\r\n");
    while (client.connected()) {
        String line = client.readStringUntil('\n');
        if (line == "\r") {
            break;
        }
    }
    String payload = client.readString();
    Serial.println("Google Sheets API yanıtı: " + payload);
}
