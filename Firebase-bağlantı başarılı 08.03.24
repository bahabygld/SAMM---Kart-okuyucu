#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <SPI.h>
#include <MFRC522.h>
#include "time.h"

// Provide the token generation process info.
#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// Insert your network credentials
#define WIFI_SSID "VodafoneNet-RBE84T"
#define WIFI_PASSWORD "SAMM2023TR."

// Insert Firebase project API Key
#define API_KEY "AIzaSyDF6LtJOLJnzhYwdN6nq_Fd5fpW8Ezj07o"

// Insert Authorized Email and Corresponding Password
#define USER_EMAIL "baha_bygld@gmail.com"
#define USER_PASSWORD "224223"

// Insert RTDB URL
#define DATABASE_URL "https://data-yollama-default-rtdb.europe-west1.firebasedatabase.app/"

// Define MFRC522 pins
#define RST_PIN     15 // MFRC522 RST pinini GPIO 14 (D14) pinine bağla
#define SS_PIN      5   // MFRC522 SDA (SPI için) pinini GPIO 13 (D13) pinine bağla
#define MOSI_PIN    23  // MFRC522 MOSI (SPI için) pinini GPIO 14 (D14) pinine bağla
#define MISO_PIN    19  // MFRC522 MISO (SPI için) pinini GPIO 12 (D12) pinine bağla
#define SCK_PIN     18  // MFRC522 SCK (SPI için) pinini GPIO 13 (D13) pinine bağla

MFRC522 mfrc522(SS_PIN, RST_PIN);  // MFRC522 nesnesini oluştur

// Define Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// Variable to save USER UID
String uid;

// Database main path (to be updated in setup with the user UID)
String databasePath;
// Database child nodes
String uidPath = "/uid";

// Parent Node (to be updated in every loop)
String parentPath;

const char* ntpServer = "pool.ntp.org";

// Timer variables (send new readings every three minutes)
unsigned long sendDataPrevMillis = 0;
unsigned long timerDelay = 180000;

// Initialize WiFi
void initWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
  Serial.println();
}

void setup() {
  Serial.begin(115200);

  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN); // Init SPI bus
  mfrc522.PCD_Init(); // Init MFRC522
  initWiFi();
  configTime(0, 0, ntpServer);

  // Assign the api key (required)
  config.api_key = API_KEY;

  // Assign the user sign in credentials
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  // Assign the RTDB URL (required)
  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);

  // Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h

  // Assign the maximum retry of token generation
  config.max_token_generation_retry = 5;

  // Initialize the library with the Firebase authen and config
  Firebase.begin(&config, &auth);

  // Getting the user UID might take a few seconds
  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  // Print user UID
  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);

  // Update database path
  databasePath = "/UsersData/" + uid + "/readings";
}

void loop() {
  // Look for new cards
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    // Send new readings to database
    if (Firebase.ready() && (millis() - sendDataPrevMillis > timerDelay || sendDataPrevMillis == 0)) {
      sendDataPrevMillis = millis();

      parentPath = databasePath + "/" + String(millis());

      FirebaseJson json;
      json.set(uidPath.c_str(), String(mfrc522.uid.uidByte[0]) + String(mfrc522.uid.uidByte[1]) + String(mfrc522.uid.uidByte[2]) + String(mfrc522.uid.uidByte[3]));
      Serial.printf("Set json... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());
    }
  }
  mfrc522.PICC_HaltA(); // Halt PICC
  mfrc522.PCD_StopCrypto1(); // Stop encryption on PCD
}
